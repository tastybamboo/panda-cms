---
name: "Release Gem"

"on": # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      version:
        description: "Specific version (optional, overrides version_type)"
        required: false
        type: string
      dry_run:
        description: "Dry run (skip gem publishing)"
        required: false
        default: false
        type: boolean
      skip_tests:
        description: "Skip test suite (not recommended)"
        required: false
        default: false
        type: boolean

jobs:
  release-gem:
    name: "Release Gem to RubyGems"
    runs-on: "ubuntu-latest"
    environment:
      name: production
      url: https://rubygems.org/gems/panda-cms
    permissions:
      contents: write # For creating tags and releases
      pull-requests: write # For creating PRs
    env:
      BUNDLE_PATH: "vendor/bundle"
      RAILS_ENV: test

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0 # Need full history for version bumping

      - name: "Setup Ruby"
        uses: "ruby/setup-ruby@v1"
        with:
          bundler-cache: true

      - name: "Install gem-release"
        run: |
          gem install gem-release

      - name: "Setup test database"
        env:
          DATABASE_URL: "postgres://postgres:password@localhost:5432/test"
          RAILS_ENV: test
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load

      - name: "Compile assets for tests"
        working-directory: spec/dummy
        env:
          DATABASE_URL: "postgres://postgres:password@localhost:5432/test"
          RAILS_ENV: test
        run: |
          echo "üîß Compiling assets for test environment..."
          # Compile Core assets first
          bundle exec rake panda:core:assets:compile || echo "Core assets compilation not available"
          # Then compile CMS assets
          bundle exec rake panda:cms:assets:compile
          echo "‚úÖ Asset compilation complete"

          # Verify assets exist
          echo "Verifying compiled assets:"
          ls -la public/panda-cms-assets/

      - name: "Run tests"
        if: ${{ !inputs.skip_tests }}
        env:
          DATABASE_URL: "postgres://postgres:password@localhost:5432/test"
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          RAILS_ENV: test
        run: |
          echo "üß™ Running test suite..."
          bundle exec rspec --tag ~skip --fail-fast

      - name: "Determine version"
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
            echo "Using specific version: $VERSION"
          else
            # Get current version
            CURRENT_VERSION=$(ruby -r ./lib/panda-cms/version.rb -e "puts Panda::CMS::VERSION")
            echo "Current version: $CURRENT_VERSION"

            # Calculate next version based on type
            case "${{ inputs.version_type }}" in
              major)
                VERSION=$(gem bump --pretend --version major | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
                ;;
              minor)
                VERSION=$(gem bump --pretend --version minor | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
                ;;
              patch)
                VERSION=$(gem bump --pretend --version patch | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
                ;;
            esac
            echo "Next version: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=v$VERSION" >> $GITHUB_OUTPUT

      - name: "Check if version already exists"
        run: |
          if git tag --list | grep -q "^${{ steps.version.outputs.TAG }}$"; then
            echo "‚ùå Version ${{ steps.version.outputs.TAG }} already exists!"
            exit 1
          fi

          if gem list -r panda-cms -a | grep -q "${{ steps.version.outputs.VERSION }}"; then
            echo "‚ö†Ô∏è Warning: Version ${{ steps.version.outputs.VERSION }} already exists on RubyGems"
            if [ "${{ inputs.dry_run }}" != "true" ]; then
              echo "‚ùå Cannot publish existing version. Please choose a different version."
              exit 1
            fi
          fi

      - name: "Create release branch"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          BRANCH="release/${{ steps.version.outputs.TAG }}"
          git checkout -b "$BRANCH"
          echo "Created branch: $BRANCH"

          # Clean up any uncommitted changes from asset compilation
          # These are test artifacts that shouldn't be in the release
          git clean -fd
          git checkout -- .

      - name: "Bump version"
        run: |
          echo "üìù Updating version to ${{ steps.version.outputs.VERSION }}..."

          # Manually update version file since gem bump requires clean working directory
          VERSION_FILE="lib/panda-cms/version.rb"
          sed -i "s/VERSION = \".*\"/VERSION = \"${{ steps.version.outputs.VERSION }}\"/" $VERSION_FILE

          # Disable frozen mode for bundle update
          bundle config set frozen false

          # Update Gemfile.lock
          bundle update panda-cms

      - name: "Generate changelog"
        id: changelog
        run: |
          echo "üìã Generating changelog..."

          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Changes since $PREVIOUS_TAG:"
            echo ""

            # Generate changelog
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" "$PREVIOUS_TAG"..HEAD | grep -v "Merge pull request" | head -20)

            # Save to file for release notes
            {
              echo "## What's Changed"
              echo ""
              echo "$CHANGELOG"
              echo ""
              echo "**Full Changelog**: https://github.com/tastybamboo/panda-cms/compare/$PREVIOUS_TAG...${{ steps.version.outputs.TAG }}"
            } > release_notes.md

            cat release_notes.md
          else
            echo "First release!" > release_notes.md
          fi

      - name: "Commit version bump"
        run: |
          # Only add specific files, not vendor/bundle
          git add lib/panda-cms/version.rb
          git add Gemfile.lock
          git add release_notes.md

          # Check if there are actual changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Release ${{ steps.version.outputs.VERSION }}"
          fi

      - name: "Build gem"
        run: |
          echo "üíé Building gem..."
          gem build panda-cms.gemspec

          # Verify gem was built
          GEM_FILE="panda-cms-${{ steps.version.outputs.VERSION }}.gem"
          if [ ! -f "$GEM_FILE" ]; then
            echo "‚ùå Gem file not found: $GEM_FILE"
            exit 1
          fi

          echo "‚úÖ Gem built: $GEM_FILE ($(du -h $GEM_FILE | cut -f1))"

          # Display gem contents
          echo ""
          echo "üì¶ Gem contents:"
          gem specification $GEM_FILE | grep -E "files:|version:" | head -20

      - name: "Create and push tag"
        if: ${{ !inputs.dry_run }}
        run: |
          git tag -a ${{ steps.version.outputs.TAG }} -m "Release ${{ steps.version.outputs.VERSION }}"
          git push origin "release/${{ steps.version.outputs.TAG }}" --tags

      - name: "Wait for asset compilation"
        if: ${{ !inputs.dry_run }}
        run: |
          echo "‚è≥ Waiting for asset compilation workflow to complete..."

          # Wait for the release-assets workflow to start
          sleep 30

          # Poll for workflow completion (max 10 minutes)
          ASSET_FOUND=false
          for i in {1..20}; do
            echo "Checking asset workflow status (attempt $i/20)..."

            # Check if release exists and has assets
            if gh release view ${{ steps.version.outputs.TAG }} --json assets -q '.assets | length' > /dev/null 2>&1; then
              ASSET_COUNT=$(gh release view ${{ steps.version.outputs.TAG }} --json assets -q '.assets | length')
              if [ "$ASSET_COUNT" -gt 0 ]; then
                echo "‚úÖ Assets uploaded successfully!"
                gh release view ${{ steps.version.outputs.TAG }} --json assets -q '.assets[].name'
                ASSET_FOUND=true
                break
              fi
            fi

            if [ $i -eq 20 ]; then
              echo "‚ùå Asset compilation timeout - assets are required for production"
              echo "The release-assets workflow did not complete in time."
              echo "Please check: https://github.com/tastybamboo/panda-cms/actions/workflows/release-assets.yml"
              exit 1
            else
              sleep 30
            fi
          done

          # Verify we have the required assets
          if [ "$ASSET_FOUND" != "true" ]; then
            echo "‚ùå No assets found for release ${{ steps.version.outputs.TAG }}"
            echo "Cannot publish gem without compiled assets."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Publish to RubyGems"
        if: ${{ !inputs.dry_run }}
        env:
          GEM_HOST_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          echo "üì§ Publishing gem to RubyGems..."

          GEM_FILE="panda-cms-${{ steps.version.outputs.VERSION }}.gem"

          # Set up credentials
          mkdir -p ~/.gem
          echo "---" > ~/.gem/credentials
          echo ":rubygems_api_key: $GEM_HOST_API_KEY" >> ~/.gem/credentials
          chmod 0600 ~/.gem/credentials

          # Publish gem
          if gem push $GEM_FILE; then
            echo "‚úÖ Gem published successfully!"
          else
            echo "‚ùå Failed to publish gem"
            exit 1
          fi

          # Clean up credentials
          rm ~/.gem/credentials

      - name: "Display PR instructions"
        if: ${{ !inputs.dry_run }}
        run: |
          echo "üìù Manual PR Creation Required"
          echo ""
          echo "GitHub Actions cannot create PRs with the default token."
          echo "Please create the PR manually:"
          echo ""
          echo "1. Visit: https://github.com/tastybamboo/panda-cms/pull/new/release/${{ steps.version.outputs.TAG }}"
          echo "2. Set base branch to: main"
          echo "3. Use title: Release ${{ steps.version.outputs.VERSION }}"
          echo "4. Add description about the release"
          echo ""
          echo "Or run locally:"
          echo "gh pr create --title \"Release ${{ steps.version.outputs.VERSION }}\" --body \"Release of version ${{ steps.version.outputs.VERSION }}\" --base main --head \"release/${{ steps.version.outputs.TAG }}\""

      - name: "Verify release"
        if: ${{ !inputs.dry_run }}
        run: |
          echo "üîç Verifying release..."

          # Wait a bit for RubyGems to update
          sleep 30

          # Check if gem is available on RubyGems
          if gem list -r panda-cms -a | grep -q "${{ steps.version.outputs.VERSION }}"; then
            echo "‚úÖ Gem is available on RubyGems!"
          else
            echo "‚ö†Ô∏è Gem not yet visible on RubyGems (this may take a few minutes)"
          fi

          # Display release information
          echo ""
          echo "üìã Release Summary:"
          echo "  Version: ${{ steps.version.outputs.VERSION }}"
          echo "  Tag: ${{ steps.version.outputs.TAG }}"
          echo "  Branch: release/${{ steps.version.outputs.TAG }}"
          echo "  Gem: panda-cms-${{ steps.version.outputs.VERSION }}.gem"
          echo ""
          echo "üéâ Release complete!"
          echo ""
          echo "üìå Required Manual Steps:"
          echo "1. Create PR: https://github.com/tastybamboo/panda-cms/pull/new/release/${{ steps.version.outputs.TAG }}"
          echo "2. Review and merge the PR"
          echo "3. Delete the release branch after merging:"
          echo "   git push origin --delete release/${{ steps.version.outputs.TAG }}"
          echo "4. Announce the release"
          echo ""
          echo "‚ö†Ô∏è IMPORTANT: The gem is published but the code changes are not yet in main branch!"

      - name: "Dry run summary"
        if: ${{ inputs.dry_run }}
        run: |
          echo "üèÉ DRY RUN COMPLETE"
          echo ""
          echo "This was a dry run. No changes were pushed or published."
          echo ""
          echo "Would have:"
          echo "  - Created version: ${{ steps.version.outputs.VERSION }}"
          echo "  - Created tag: ${{ steps.version.outputs.TAG }}"
          echo "  - Built gem: panda-cms-${{ steps.version.outputs.VERSION }}.gem"
          echo "  - Published to RubyGems"
          echo ""
          echo "To perform the actual release, run this workflow again with dry_run=false"
