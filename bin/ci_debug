#!/usr/bin/env ruby
# frozen_string_literal: true

# CI Debug Script for Panda CMS
# This script helps diagnose test failures in CI by checking the environment setup
# Usage: bundle exec rails runner bin/ci_debug

puts "=== CI Debug Script for Panda CMS ==="
puts "Time: #{Time.now}"
puts "Ruby version: #{RUBY_VERSION}"
puts "Rails env: #{ENV['RAILS_ENV']}"
puts "GitHub Actions: #{ENV['GITHUB_ACTIONS']}"
puts

# Rails environment is already loaded by 'rails runner'
puts "✅ Rails environment loaded by rails runner"
puts

# Check database connectivity
puts "=== Database Check ==="
begin
  ActiveRecord::Base.connection.execute("SELECT 1")
  puts "✅ Database connection successful"

  user_count = Panda::CMS::User.count
  puts "Total users in database: #{user_count}"

  if user_count == 0
    puts "⚠️  No users found - attempting to load fixtures..."

    # Try to load fixtures manually
    begin
      require 'active_record/fixtures'
      fixture_path = File.expand_path("../spec/fixtures", __dir__)
      puts "Loading fixtures from: #{fixture_path}"

      if File.directory?(fixture_path)
        ActiveRecord::FixtureSet.create_fixtures(fixture_path, ['panda_cms_users'])
        puts "✅ Fixtures loaded successfully"

        user_count = Panda::CMS::User.count
        puts "Users after fixture loading: #{user_count}"
      else
        puts "❌ Fixture directory not found: #{fixture_path}"
      end
    rescue => fixture_error
      puts "❌ Error loading fixtures: #{fixture_error.message}"
    end
  else
    puts "✅ Users found in database"
  end

  admin_user = Panda::CMS::User.find_by(email: "admin@example.com")
  if admin_user
    puts "✅ Admin user found:"
    puts "  ID: #{admin_user.id}"
    puts "  Email: #{admin_user.email}"
    puts "  Name: #{admin_user.firstname} #{admin_user.lastname}"
    puts "  Admin: #{admin_user.admin?}"
  else
    puts "❌ Admin user NOT found!"
    available_emails = Panda::CMS::User.pluck(:email)
    puts "Available user emails: #{available_emails.inspect}"
  end
rescue => e
  puts "❌ Database error: #{e.message}"
end

puts

# Check OmniAuth configuration
puts "=== OmniAuth Configuration ==="
begin
  puts "Test mode: #{OmniAuth.config.test_mode}"
  puts "On failure: #{OmniAuth.config.on_failure}"
  puts "Mock auth strategies: #{OmniAuth.config.mock_auth.keys}"

  if OmniAuth.config.test_mode
    puts "✅ OmniAuth properly configured for testing"
  else
    puts "❌ OmniAuth test mode is disabled! Tests will fail."
  end
rescue => e
  puts "❌ OmniAuth error: #{e.message}"
end

puts

# Check Panda CMS authentication config
puts "=== Panda CMS Authentication Config ==="
begin
  auth_config = Panda::CMS.config.authentication
  puts "Authentication providers: #{auth_config.keys}"
  auth_config.each do |provider, config|
    puts "  #{provider}: enabled=#{config[:enabled]}, hidden=#{config[:hidden]}"
  end
  puts "✅ Panda CMS auth config loaded"
rescue => e
  puts "❌ Panda CMS auth config error: #{e.message}"
end

puts

# Test mock auth setup
puts "=== Mock Auth Test ==="
begin
  admin_user = Panda::CMS::User.find_by(email: "admin@example.com")
  if admin_user
    OmniAuth.config.mock_auth[:google] = OmniAuth::AuthHash.new({
      provider: "google",
      uid: admin_user.id,
      info: {
        email: admin_user.email,
        name: "#{admin_user.firstname} #{admin_user.lastname}"
      },
      credentials: {
        token: "mock_token",
        expires_at: Time.now + 1.week
      }
    })
    puts "✅ Mock auth set up successfully"
    puts "Mock auth info: #{OmniAuth.config.mock_auth[:google].info.inspect}"
  else
    puts "❌ Cannot set up mock auth - no admin user"
  end
rescue => e
  puts "❌ Mock auth setup error: #{e.message}"
end

puts

# Test session creation logic
puts "=== Session Creation Simulation ==="
begin
  admin_user = Panda::CMS::User.find_by(email: "admin@example.com")
  if admin_user
    # Simulate the SessionsController#create logic
    user_info = {
      "email" => admin_user.email,
      "name" => "#{admin_user.firstname} #{admin_user.lastname}"
    }

    user = Panda::CMS::User.find_by(email: user_info["email"])

    if user.nil?
      puts "❌ User lookup failed"
    elsif !user.admin?
      puts "❌ User is not admin"
    else
      puts "✅ User lookup successful"
      puts "✅ User is admin"
      puts "Session would be created with user_id: #{user.id}"
    end
  else
    puts "❌ No admin user to test with"
  end
rescue => e
  puts "❌ Session creation test error: #{e.message}"
end

puts

# Test admin constraint
puts "=== Admin Constraint Test ==="
begin
  admin_user = Panda::CMS::User.find_by(email: "admin@example.com")
  if admin_user
    # Create a mock request with session
    MockRequest = Struct.new(:session)
    mock_request = MockRequest.new({ user_id: admin_user.id })

    constraint = Panda::CMS::AdminConstraint.new(&:present?)
    matches = constraint.matches?(mock_request)
    current_user = constraint.current_user(mock_request)

    puts "Admin constraint matches: #{matches}"
    puts "Current user from constraint: #{current_user&.email || 'nil'}"

    if matches
      puts "✅ Admin constraint working correctly"
    else
      puts "❌ Admin constraint failing"
    end
  else
    puts "❌ No admin user to test constraint with"
  end
rescue => e
  puts "❌ Admin constraint test error: #{e.message}"
end

puts

# Test Capybara configuration
puts "=== Capybara Configuration ==="
begin
  puts "Default driver: #{Capybara.default_driver}"
  puts "JavaScript driver: #{Capybara.javascript_driver}"
  puts "Default max wait time: #{Capybara.default_max_wait_time}"
  puts "App host: #{Capybara.app_host}"
  puts "Server host: #{Capybara.server_host}"
  puts "Server port: #{Capybara.server_port}"
  puts "✅ Capybara configured"
rescue => e
  puts "❌ Capybara configuration error: #{e.message}"
end

puts

# Check JavaScript and asset loading
puts "=== JavaScript & Asset Loading Check ==="
begin
  # Check if importmap files exist
  importmap_path = Rails.root.join("config", "importmap.rb")
  if File.exist?(importmap_path)
    puts "✅ Importmap config exists: #{importmap_path}"

    # Load and check importmap content
    importmap_content = File.read(importmap_path)
    if importmap_content.include?("application")
      puts "✅ Application entry found in importmap"
    else
      puts "❌ Application entry NOT found in importmap"
    end
  else
    puts "❌ Importmap config NOT found: #{importmap_path}"
  end

  # Check JavaScript application files
  js_app_path = Rails.root.join("app", "javascript", "application.js")
  if File.exist?(js_app_path)
    puts "✅ JavaScript application file exists: #{js_app_path}"

    js_content = File.read(js_app_path)
    if js_content.include?("@hotwired/stimulus") || js_content.include?("controllers")
      puts "✅ Stimulus/controllers import found in application.js"
    else
      puts "❌ Stimulus/controllers import NOT found in application.js"
      puts "  Content preview: #{js_content[0..200]}..."
    end
  else
    puts "❌ JavaScript application file NOT found: #{js_app_path}"
  end

  # Check Stimulus controllers in both dummy app and main app
  dummy_controllers_path = Rails.root.join("app", "javascript", "controllers")
  main_controllers_path = Rails.root.join("..", "..", "app", "javascript", "panda", "cms", "controllers")

  controller_files = []

  # Check dummy app controllers
  if File.directory?(dummy_controllers_path)
    puts "✅ Dummy app Stimulus controllers directory exists: #{dummy_controllers_path}"
    dummy_files = Dir.glob(File.join(dummy_controllers_path, "**/*.js"))
    controller_files.concat(dummy_files)
    puts "Dummy app controller files: #{dummy_files.size}"
  else
    puts "❌ Dummy app Stimulus controllers directory NOT found: #{dummy_controllers_path}"
  end

  # Check main app controllers (engine)
  engine_controllers_path = Rails.root.join("..", "..", "app", "javascript", "panda", "cms", "controllers")
  if File.directory?(engine_controllers_path)
    puts "✅ Engine Stimulus controllers directory exists: #{engine_controllers_path}"
    engine_files = Dir.glob(File.join(engine_controllers_path, "**/*.js"))
    controller_files.concat(engine_files)
    puts "Engine controller files: #{engine_files.size}"
  else
    puts "❌ Engine Stimulus controllers directory NOT found: #{engine_controllers_path}"
  end

  puts "Total Stimulus controller files found: #{controller_files.size}"

  # Look for theme-form controller specifically
  theme_controller = controller_files.find { |f| f.include?("theme") }
  if theme_controller
    puts "✅ Theme controller found: #{File.basename(theme_controller)}"
    puts "  Location: #{theme_controller}"
  else
    puts "❌ Theme controller NOT found"
    puts "  Available controllers: #{controller_files.map { |f| File.basename(f) }.join(', ')}"
  end

  # Check if assets are precompiled in production-like environments
  if Rails.env.production? || ENV['RAILS_ENV'] == 'production'
    manifest_path = Rails.root.join("public", "assets", ".sprockets-manifest-*.json")
    manifest_files = Dir.glob(manifest_path)

    if manifest_files.any?
      puts "✅ Asset manifest found (precompiled assets)"
    else
      puts "❌ Asset manifest NOT found (assets may not be precompiled)"
    end
  end

  # Check CSS files
  css_path = Rails.root.join("app", "assets", "stylesheets", "application.css")
  if File.exist?(css_path)
    puts "✅ Application CSS exists: #{css_path}"
  else
    puts "❌ Application CSS NOT found: #{css_path}"
  end

  # Check engine asset integration
  puts "--- Engine Asset Integration ---"

  # Check if the Panda CMS engine JavaScript is being loaded
  engine_js_path = Rails.root.join("..", "..", "app", "javascript", "panda", "cms", "application.js")
  if File.exist?(engine_js_path)
    puts "✅ Engine JavaScript exists: #{engine_js_path}"

    engine_js_content = File.read(engine_js_path)
    if engine_js_content.include?("stimulus") || engine_js_content.include?("controllers")
      puts "✅ Engine JavaScript includes Stimulus setup"
    else
      puts "❌ Engine JavaScript missing Stimulus setup"
    end
  else
    puts "❌ Engine JavaScript NOT found: #{engine_js_path}"
  end

  # Check if engine controllers are being registered
  engine_controllers_index = Rails.root.join("..", "..", "app", "javascript", "panda", "cms", "controllers", "index.js")
  if File.exist?(engine_controllers_index)
    puts "✅ Engine controllers index exists"

    index_content = File.read(engine_controllers_index)
    if index_content.include?("theme_form_controller") || index_content.include?("theme-form")
      puts "✅ Theme form controller registered in engine index"
    else
      puts "❌ Theme form controller NOT registered in engine index"
      puts "  Index content preview: #{index_content[0..200]}..."
    end
  else
    puts "❌ Engine controllers index NOT found: #{engine_controllers_index}"
  end

  # Check importmap integration for engine assets
  if File.exist?(importmap_path)
    importmap_content = File.read(importmap_path)
    if importmap_content.include?("panda") || importmap_content.include?("cms")
      puts "✅ Panda CMS assets referenced in importmap"
    else
      puts "❌ Panda CMS assets NOT referenced in importmap"
    end
  end

  puts "✅ Asset loading checks complete"
rescue => e
  puts "❌ Asset loading check error: #{e.message}"
end

puts

# Check Rails asset pipeline and JavaScript execution
puts "=== Rails Asset Pipeline & JavaScript Execution Check ==="
begin
  # Check if Rails application can compile assets
  puts "Rails env: #{Rails.env}"
  puts "Asset pipeline enabled: #{Rails.application.config.assets.enabled}"

  # Check asset host configuration
  asset_host = Rails.application.config.asset_host
  puts "Asset host: #{asset_host || 'default'}"

  # Check if we can generate asset URLs
  begin
    if defined?(ActionController::Base)
      controller = ActionController::Base.new
      controller.request = ActionDispatch::Request.new({})

      app_js_path = Rails.application.assets&.find_asset('application.js')&.logical_path rescue nil
      if app_js_path
        puts "✅ application.js asset found in pipeline"
      else
        puts "❌ application.js asset NOT found in pipeline"
      end

      app_css_path = Rails.application.assets&.find_asset('application.css')&.logical_path rescue nil
      if app_css_path
        puts "✅ application.css asset found in pipeline"
      else
        puts "❌ application.css asset NOT found in pipeline"
      end
    end
  rescue => asset_error
    puts "⚠️  Asset pipeline check failed: #{asset_error.message}"
  end

  # Test if we can create a simple Capybara session for JS testing
  if defined?(Capybara)
    puts "Capybara available: true"
    puts "JavaScript driver: #{Capybara.javascript_driver}"

    # Check if browser can execute JavaScript
    begin
      Capybara.current_session.driver.browser.execute_script("return 'JS Working'") rescue nil
      puts "✅ JavaScript execution capability detected"
    rescue => js_error
      puts "❌ JavaScript execution test failed: #{js_error.message}"
    end
  else
    puts "❌ Capybara not available"
  end

  # Check Stimulus-specific setup in both locations
  dummy_stimulus_app_path = Rails.root.join("app", "javascript", "controllers", "application.js")
  main_stimulus_app_path = Rails.root.join("..", "..", "app", "javascript", "panda", "cms", "controllers", "index.js")

  stimulus_found = false

  # Check dummy app
  if File.exist?(dummy_stimulus_app_path)
    puts "✅ Dummy app Stimulus application controller exists"
    content = File.read(dummy_stimulus_app_path)
    if content.include?("Application.start")
      puts "✅ Stimulus application.start() found in dummy app"
      stimulus_found = true
    end
  end

  # Check engine controllers index
  engine_stimulus_index = Rails.root.join("..", "..", "app", "javascript", "panda", "cms", "controllers", "index.js")
  if File.exist?(engine_stimulus_index)
    puts "✅ Engine Stimulus controllers index exists"
    content = File.read(engine_stimulus_index)
    puts "Engine controllers index content preview: #{content[0..100]}..."
    stimulus_found = true
  end

  unless stimulus_found
    puts "❌ Stimulus application setup NOT found in either location"
  end

  puts "✅ Asset pipeline & JS execution checks complete"
rescue => e
  puts "❌ Asset pipeline & JS execution check error: #{e.message}"
end

puts

# Check for common CI issues
puts "=== CI Environment Check ==="
puts "Headless mode: #{ENV['HEADLESS']}"
puts "Display: #{ENV['DISPLAY']}"
puts "GitHub Actions: #{ENV['GITHUB_ACTIONS']}"
puts "CI: #{ENV['CI']}"
puts "Test database URL: #{ENV['DATABASE_URL']}"

puts

puts "=== Debug Complete ==="
puts "If all checks pass but tests still fail, the issue is likely:"
puts "1. Race conditions between tests"
puts "2. Session state not being properly reset"
puts "3. JavaScript/browser timing issues"
puts "4. Database transaction isolation problems"
puts "5. Asset compilation or JavaScript loading issues"
