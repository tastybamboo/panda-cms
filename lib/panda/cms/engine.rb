# frozen_string_literal: true

require "rubygems"
require "panda/core"
require "panda/core/engine"
require "panda/cms/railtie"

require "invisible_captcha"

module Panda
  module CMS
    class Engine < ::Rails::Engine
      isolate_namespace Panda::CMS

      # Add services directory to autoload paths
      config.autoload_paths += %W[
        #{root}/app/services
      ]

      # Basic session setup only
      initializer "panda.cms.session", before: :load_config_initializers do |app|
        app.config.middleware = app.config.middleware.dup if app.config.middleware.frozen?

        app.config.session_store :cookie_store, key: "_panda_cms_session"
        app.config.middleware.use ActionDispatch::Cookies
        app.config.middleware.use ActionDispatch::Session::CookieStore, app.config.session_options
      end

      config.to_prepare do
        ApplicationController.helper(::ApplicationHelper)
        ApplicationController.helper(Panda::CMS::AssetHelper)
      end

      # Set our generators
      config.generators do |g|
        g.orm :active_record, primary_key_type: :uuid
        g.test_framework :rspec, fixture: true
        g.fixture_replacement nil
        g.view_specs false
        g.templates.unshift File.expand_path("../templates", __dir__)
      end

      # Make files in public available to the main app (e.g. /panda_cms-assets/favicon.ico)
      config.app_middleware.use(
        Rack::Static,
        urls: ["/panda-cms-assets"],
        root: Panda::CMS::Engine.root.join("public")
      )

      # Custom error handling
      # config.exceptions_app = Panda::CMS::ExceptionsApp.new(exceptions_app: routes)

      initializer "panda.cms.assets" do |app|
        if Rails.configuration.respond_to?(:assets)
          # Add JavaScript paths
          app.config.assets.paths << root.join("app/javascript")
          app.config.assets.paths << root.join("app/javascript/panda")
          app.config.assets.paths << root.join("app/javascript/panda/cms")
          app.config.assets.paths << root.join("app/javascript/panda/cms/controllers")

          # Make sure these files are precompiled
          app.config.assets.precompile += %w[
            panda_cms_manifest.js
            panda/cms/controllers/**/*.js
            panda/cms/application_panda_cms.js
          ]
        end
      end

      # Add importmap paths from the engine
      initializer "panda.cms.importmap", before: "importmap" do |app|
        if app.config.respond_to?(:importmap)
          # Create a new array if frozen
          app.config.importmap.paths = app.config.importmap.paths.dup if app.config.importmap.paths.frozen?

          # Add our paths
          app.config.importmap.paths << root.join("config/importmap.rb")

          # Handle cache sweepers similarly
          if app.config.importmap.cache_sweepers.frozen?
            app.config.importmap.cache_sweepers = app.config.importmap.cache_sweepers.dup
          end
          app.config.importmap.cache_sweepers << root.join("app/javascript")
        end
      end

      config.after_initialize do |app|
        # Append routes to the routes file
        app.routes.append do
          mount Panda::CMS::Engine => "/", :as => "panda_cms"
          post "/_forms/:id", to: "panda/cms/form_submissions#create", as: :panda_cms_form_submit
          get "/_maintenance", to: "panda/cms/errors#error_503", as: :panda_cms_maintenance
          get "/*path", to: "panda/cms/pages#show", as: :panda_cms_page
          root to: "panda/cms/pages#root"
        end
      end

      initializer "#{engine_name}.backtrace_cleaner" do |_app|
        engine_root_regex = Regexp.escape(root.to_s + File::SEPARATOR)

        # Clean those ERB lines, we don't need the internal autogenerated
        # ERB method, what we do need (line number in ERB file) is already there
        Rails.backtrace_cleaner.add_filter do |line|
          line.sub(/(\.erb:\d+):in `__.*$/, '\\1')
        end

        # Remove our own engine's path prefix, even if it's
        # being used from a local path rather than the gem directory.
        Rails.backtrace_cleaner.add_filter do |line|
          line.sub(/^#{engine_root_regex}/, "#{engine_name} ")
        end

        # Keep Umlaut's own stacktrace in the backtrace -- we have to remove Rails
        # silencers and re-add them how we want.
        Rails.backtrace_cleaner.remove_silencers!

        # Silence what Rails silenced, UNLESS it looks like
        # it's from Umlaut engine
        Rails.backtrace_cleaner.add_silencer do |line|
          (line !~ Rails::BacktraceCleaner::APP_DIRS_PATTERN) &&
            (line !~ /^#{engine_root_regex}/) &&
            (line !~ /^#{engine_name} /)
        end
      end

      # Set up ViewComponent
      initializer "panda.cms.view_component" do |app|
        app.config.view_component.preview_paths ||= []
        app.config.view_component.preview_paths << root.join("spec/components/previews")
        app.config.view_component.generate.sidecar = true
        app.config.view_component.generate.preview = true
      end

      # Authentication is now handled by Panda::Core::Engine

      # Configure Core for CMS
      initializer "panda.cms.configure_core" do |app|
        Panda::Core.configure do |config|
          # Customize login page
          config.login_logo_path = "/panda-cms-assets/panda-nav.png"
          config.login_page_title = "Panda CMS Admin"
          
          # Set dashboard redirect path to CMS dashboard
          config.dashboard_redirect_path = "#{Panda::CMS.route_namespace}/cms"
          
          # Customize initial breadcrumb
          config.initial_admin_breadcrumb = ->(controller) {
            # Use CMS dashboard path - will be evaluated in controller context
            if controller.respond_to?(:admin_dashboard_path)
              ["Admin", controller.admin_dashboard_path]
            else
              ["Admin", "#{Panda::CMS.route_namespace}/cms"]
            end
          }
          
          # Dashboard widgets
          config.admin_dashboard_widgets = ->(user) {
            widgets = []
            
            # Add CMS statistics widgets if CMS is available
            if defined?(Panda::CMS)
              widgets << Panda::CMS::Admin::StatisticsComponent.new(
                metric: "Views Today", 
                value: Panda::CMS::Visit.group_by_day(:visited_at, last: 1).count.values.first || 0
              )
              widgets << Panda::CMS::Admin::StatisticsComponent.new(
                metric: "Views Last Week", 
                value: Panda::CMS::Visit.group_by_week(:visited_at, last: 1).count.values.first || 0
              )
              widgets << Panda::CMS::Admin::StatisticsComponent.new(
                metric: "Views Last Month", 
                value: Panda::CMS::Visit.group_by_month(:visited_at, last: 1).count.values.first || 0
              )
            end
            
            widgets
          }
        end
      end

      config.before_initialize do |_app|
        # Default configuration
        Panda::CMS.configure do |config|
          # Array of additional EditorJS tools to load
          # Example: [{ url: "https://cdn.jsdelivr.net/npm/@editorjs/image@latest" }]
          config.editor_js_tools ||= []

          # Hash of EditorJS tool configurations
          # Example: { image: { class: 'ImageTool', config: { ... } } }
          config.editor_js_tool_config ||= {}
        end
      end
    end

    class MissingBlockError < StandardError; end

    class BlockError < StandardError; end
  end
end
